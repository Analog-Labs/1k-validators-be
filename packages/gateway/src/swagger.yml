openapi: 3.0.0
info:
  title: Gateway API
  description: This is a sample API to demonstrate Swagger documentation
  version: "1.0.0"
servers:

  - url: https://kusama.w3f.community/
    description: Kusama
  - url: https://polkadot.w3f.community/
    description: Polkadot
  - url: https://kusama-staging.w3f.community/
    description: Kusama Staging
  - url: https://polkadot-staging.w3f.community/
    description: Polkadot Staging
  - url: http://localhost:3300
    description: Local server
  - url: http://localhost:3301
    description: Local server


tags:
  - name: Candidates
    description: Querying fields of candidates
  - name: Rewards
    description: Querying rewards for stakers
  - name: Nominator
    description: Querying fields of nominators
  - name: Location
    description: Querying location data
  - name: Score
    description: Querying score data

paths:


  /candidate/{candidateStash}:
    get:
      tags:
        - Candidates
      description: Returns info about a candidate
      parameters:
        - in: path
          name: candidateStash
          schema:
            type: string
          required: true
          description: The candidate stash string
      responses:
        200:
          description: Candidate.

  /candidates:
    get:
      tags:
        - Candidates
      summary: Retrieve a list of candidates
      responses:
        200:
          description: Successful response with a list of candidates


  /candidates/rank:
    get:
      tags:
        - Candidates
      summary: Retrieve a list of candidates ordered by rank
      responses:
        200:
          description: Successful response with a list of candidates

  /candidates/valid:
    get:
      tags:
        - Candidates
      summary: Retrieve a list of candidates that are valid
      responses:
        200:
          description: Successful response with a list of candidates

  /candidates/invalid:
    get:
      tags:
        - Candidates
      summary: Retrieve a list of candidates that are invalid
      responses:
        200:
          description: Successful response with a list of candidates

  /rewards/validator/{stash}:
    get:
      tags:
        - Rewards
      description: Returns rewards for a validator
      parameters:
        - in: path
          name: stash
          schema:
            type: string
          required: true
          description: The validator stash string
      responses:
        200:
          description: Rewards.

  /rewards/validator/{address}/total:
    get:
      summary: "Get Total Rewards for a Validator"
      tags:
        - Rewards
      description: "Retrieves the total rewards and count for a given validator based on their address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The address of the validator."
      responses:
        '200':
          description: "Total rewards for the specified validator."

        '404':
          description: "Validator not found."

  /rewards/validator/{address}/stats:
    get:
      tags:
        - Rewards
      summary: "Get Reward Statistics for a Validator"
      description: "Retrieves statistical information about rewards for a given validator by their address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Statistical information about the rewards for the specified validator."
        '404':
          description: "Validator not found."

  /rewards/validators/total:
    get:
      summary: "Get all validators total rewards"
      tags:
        - Rewards
      description: "Retrieve a list  of all validators total rewards."
      responses:
        '200':
          description: "Successful response with a list of rewards."

  /rewards/validators/stats:
    get:
      summary: "Get All Validators Reward Stats"
      tags:
        - Rewards
      description: "Retrieve a list of all rewards stats."
      responses:
        '200':
          description: "Successful response with a list of rewards stats."

  /rewards/nominator/{stash}:
    get:
      tags:
        - Rewards
      description: Returns rewards for a nominator
      parameters:
        - in: path
          name: stash
          schema:
            type: string
          required: true
          description: The nominator stash string
      responses:
        200:
          description: Rewards.


  /rewards/nominator/{address}/total:
    get:
      summary: "Get Total Rewards for a Nominator"
      tags:
        - Rewards
      description: "Retrieves the total rewards and count for a given nominator based on their address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The address of the nominator."
      responses:
        '200':
          description: "Total rewards for the specified nominator."
        '404':
          description: "Validator not found."


  /healthcheck:
    get:
      summary: "health check of the backend"
      description: "Health check of the backend"
      responses:
        '200':
          description: "health check of the backend"


  /nominators:
    get:
      summary: "Get All Nominators"
      tags:
        - Nominator
      description: "Retrieve a list of all nominators."
      responses:
        '200':
          description: "Successful response with a list of nominators."

  /nominator/{address}:
    get:
      summary: "Get Nominator by Address"
      tags:
        - Nominator
      description: "Retrieve details of a specific nominator by address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the nominator."
      responses:
        '200':
          description: "Successful response with nominator details."
        '404':
          description: "Nominator not found."

  /nominator/{address}/{last}:
    get:
      summary: "Get Nominator by Address"
      tags:
        - Nominator
      description: "Retrieve details of a specific nominator by address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the nominator."
        - in: path
          name: last
          required: true
          schema:
            type: string
          description: "Number of eras to retrieve."
      responses:
        '200':
          description: "Successful response with nominator details."
        '404':
          description: "Nominator not found."

  /nominations:
    get:
      summary: "Get All Nominations"
      tags:
        - Nominator
      description: "Retrieve a list of all nominations."
      responses:
        '200':
          description: "Successful response with a list of nominations."

  /nominations/{address}/{last}:
    get:
      summary: "Get Nominations for a Nominator"
      tags:
        - Nominator
      description: "Retrieve a list of nominations for a specific nominator."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the nominator."
        - in: path
          name: last
          required: true
          schema:
            type: string
          description: "A parameter to specify the range or limit of nominations to retrieve."
      responses:
        '200':
          description: "Successful response with a list of nominations for the nominator."
        '404':
          description: "Nominator not found."

  /nominatorstake/{address}/last/{limit}:
    get:
      tags:
        - Nominator
      summary: Retrieve the last N stakes for a given nominator address
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The nominator's address
        - in: path
          name: limit
          required: true
          schema:
            type: integer
          description: Number of recent stakes to retrieve
      responses:
        200:
          description: A list of last N nominator stakes
          # Define response schema

  /nominatorstake/{address}:
    get:
      tags:
        - Nominator
      summary: Get the latest stake of a nominator
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The nominator's address
      responses:
        200:
          description: Latest stake of the nominator
          # Define response schema

  /nominatorstake/{address}/{era}:
    get:
      tags:
        - Nominator
      summary: Get the stake of a nominator for a specific era
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The nominator's address
        - in: path
          name: era
          required: true
          schema:
            type: integer
          description: The specific era
      responses:
        200:
          description: Nominator stake for the specified era
          # Define response schema

  /lastnomination:
    get:
      tags:
        - Nominator
      summary: The last Nomiantion
      responses:
        200:
          description: Successful response with the last nomination

  /proxytxs:
    get:
      tags:
        - Nominator
      summary: The pending proxy transactions
      responses:
        200:
          description: Successful response with the pending proxy transactions

  /location/validator/{address}:
    get:
      summary: "Validator Location Data"
      tags:
        - Location
      description: "Retrieve details of a specific validator location by address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."

  /score/{address}:
    get:
      summary: "Score Data"
      tags:
        - Score
      description: "Retrieve details of a specific validator's score'"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."
  /score/{address}/{session}:
    get:
      summary: "Score Data"
      tags:
        - Score
      description: "Retrieve details of a specific validator's score'"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
        - in: path
          name: session
          required: true
          schema:
            type: string
          description: "The session of a previous score"
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."



  /erapoints/{address}:
    get:
      summary: "Era Points"
      description: "Retrieve details of a specific validator's era points'"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."

  /totalerapoints:
    get:
      summary: "Total Era Points"
      description: "Retrieves total era points"
      responses:
        '200':
          description: "Successful response."

  /erastats:
    get:
      summary: "Era Stats"
      description: "Retrieves era stats"
      responses:
        '200':
          description: "Successful response."

  /scoremetadata:
    get:
      summary: "Score Metadata"
      description: "Retrieves score metadata"
      responses:
        '200':
          description: "Successful response."

  /scoremetadata/{session}:
    get:
      summary: "Score Metadata"
      description: "Retrieve details of a score metadata for a session'"
      parameters:
        - in: path
          name: session
          required: true
          schema:
            type: string
          description: "Session"
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."

  /release:
    get:
      summary: "Latest Release"
      description: "Retrieves latest tagged release"
      responses:
        '200':
          description: "Successful response."

  /location/currentvalidatorset:
    get:
      summary: "location stats of the current validator set"
      description: "location stats of the current validator set"
      responses:
        '200':
          description: "Successful response."

  /locationstats:
    get:
      summary: "location stats"
      description: "location stats"
      responses:
        '200':
          description: "Successful response."

  /locationstats/valid:
    get:
      summary: "location stats of valid nodes"
      description: "location stats of valid nodes"
      responses:
        '200':
          description: "Successful response."

  /locationstats/{session}:
    get:
      summary: "location stats for a session"
      description: "Retrieve details of location stats for a session'"
      parameters:
        - in: path
          name: session
          required: true
          schema:
            type: string
          description: "Session"
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."

  /validators/current:
    get:
      summary: "Current Validator Set"
      description: "Current Validator Set"
      responses:
        '200':
          description: "Successful response."

  /validators:
    get:
      summary: "Validator Set Keys"
      description: "Validator Set Keys"
      responses:
        '200':
          description: "Successful response."

  /validators/beefy:
    get:
      summary: "Validator Set Beefy Keys"
      description: "Validator Set Beefy Keys"
      responses:
        '200':
          description: "Successful response."

  /validators/beefy/dummmy:
    get:
      summary: "Validator Set Beefy Dummy Keys"
      description: "Validator Set Beefy Dummy Keys"
      responses:
        '200':
          description: "Successful response."

  /validators/{address}:
    get:
      summary: "Validator Set Keys"
      description: "Validator Set Keys"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "address"
      responses:
        '200':
          description: "Successful response."

  /validators/activeeras/{address}:
    get:
      summary: "Number of active eras for an address"
      description: "Number of active eras for an address"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "address"
      responses:
        '200':
          description: "Successful response."

  /blockindex:
    get:
      summary: "The block index of the backend"
      description: "block index of the backend"
      responses:
        '200':
          description: "Successful response."

  /stats/totalReqeusts:
    get:
      summary: "The total number of api requests of the backend"
      description: "The total number of api requests of the backend"
      responses:
        '200':
          description: "Successful response."

  /stats/endpointCount:
    get:
      summary: "The total number of api requests of the backend for an endpoint"
      description: "The total number of api requests of the backend for an endpoint"
      responses:
        '200':
          description: "Successful response."