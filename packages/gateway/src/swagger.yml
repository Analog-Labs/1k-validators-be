openapi: 3.0.0
info:
  title: Gateway API
  description: This is a sample API to demonstrate Swagger documentation
  version: "1.0.0"
servers:

  - url: https://kusama.w3f.community/
    description: Kusama
  - url: https://polkadot.w3f.community/
    description: Polkadot
  - url: https://kusama-staging.w3f.community/
    description: Kusama Staging
  - url: https://polkadot-staging.w3f.community/
    description: Polkadot Staging
  - url: http://localhost:3300
    description: Local server
  - url: http://localhost:3301
    description: Local server


tags:
  - name: Candidates
    description: Querying fields of candidates
  - name: Rewards
    description: Querying rewards for stakers
  - name: Nominator
    description: Querying fields of nominators
  - name: Location
    description: Querying location data
  - name: Score
    description: Querying score data

paths:
  /candidate/{candidateStash}:
    get:
      tags:
        - Candidates
      description: Returns info about a candidate
      parameters:
        - in: path
          name: candidateStash
          schema:
            type: string
          required: true
          description: The candidate stash string
      responses:
        200:
          description: Candidate.

  /candidates:
    get:
      tags:
        - Candidates
      summary: Retrieve a list of candidates
      responses:
        200:
          description: Successful response with a list of candidates


  /rewards/validator/{stash}:
    get:
      tags:
        - Rewards
      description: Returns rewards for a validator
      parameters:
        - in: path
          name: stash
          schema:
            type: string
          required: true
          description: The validator stash string
      responses:
        200:
          description: Rewards.

  /rewards/validator/{address}/total:
    get:
      summary: "Get Total Rewards for a Validator"
      tags:
        - Rewards
      description: "Retrieves the total rewards and count for a given validator based on their address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The address of the validator."
      responses:
        '200':
          description: "Total rewards for the specified validator."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardTotal'
        '404':
          description: "Validator not found."

  /rewards/validator/{address}/stats:
    get:
      tags:
        - Rewards
      summary: "Get Reward Statistics for a Validator"
      description: "Retrieves statistical information about rewards for a given validator by their address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Statistical information about the rewards for the specified validator."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardStats'
        '404':
          description: "Validator not found."

  /rewards/validators/total:
    get:
      summary: "Get all validators total rewards"
      tags:
        - Rewards
      description: "Retrieve a list  of all validators total rewards."
      responses:
        '200':
          description: "Successful response with a list of rewards."

  /rewards/validators/stats:
    get:
      summary: "Get All Validators Reward Stats"
      tags:
        - Rewards
      description: "Retrieve a list of all rewards stats."
      responses:
        '200':
          description: "Successful response with a list of rewards stats."

  /rewards/nominator/{stash}:
    get:
      tags:
        - Rewards
      description: Returns rewards for a nominator
      parameters:
        - in: path
          name: stash
          schema:
            type: string
          required: true
          description: The nominator stash string
      responses:
        200:
          description: Rewards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reward'

  /rewards/nominator/{address}/total:
    get:
      summary: "Get Total Rewards for a Nominator"
      tags:
        - Rewards
      description: "Retrieves the total rewards and count for a given nominator based on their address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The address of the nominator."
      responses:
        '200':
          description: "Total rewards for the specified nominator."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardTotal'
        '404':
          description: "Validator not found."

  /nominators:
    get:
      summary: "Get All Nominators"
      tags:
        - Nominator
      description: "Retrieve a list of all nominators."
      responses:
        '200':
          description: "Successful response with a list of nominators."

  /nominator/{address}:
    get:
      summary: "Get Nominator by Address"
      tags:
        - Nominator
      description: "Retrieve details of a specific nominator by address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the nominator."
      responses:
        '200':
          description: "Successful response with nominator details."
        '404':
          description: "Nominator not found."

  /nominations:
    get:
      summary: "Get All Nominations"
      tags:
        - Nominator
      description: "Retrieve a list of all nominations."
      responses:
        '200':
          description: "Successful response with a list of nominations."

  /nominations/{address}/{last}:
    get:
      summary: "Get Nominations for a Nominator"
      tags:
        - Nominator
      description: "Retrieve a list of nominations for a specific nominator."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the nominator."
        - in: path
          name: last
          required: true
          schema:
            type: string
          description: "A parameter to specify the range or limit of nominations to retrieve."
      responses:
        '200':
          description: "Successful response with a list of nominations for the nominator."
        '404':
          description: "Nominator not found."

  /nominatorstake/{address}/last/{limit}:
    get:
      tags:
        - Nominator
      summary: Retrieve the last N stakes for a given nominator address
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The nominator's address
        - in: path
          name: limit
          required: true
          schema:
            type: integer
          description: Number of recent stakes to retrieve
      responses:
        200:
          description: A list of last N nominator stakes
          # Define response schema

  /nominatorstake/{address}:
    get:
      tags:
        - Nominator
      summary: Get the latest stake of a nominator
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The nominator's address
      responses:
        200:
          description: Latest stake of the nominator
          # Define response schema

  /nominatorstake/{address}/{era}:
    get:
      tags:
        - Nominator
      summary: Get the stake of a nominator for a specific era
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: The nominator's address
        - in: path
          name: era
          required: true
          schema:
            type: integer
          description: The specific era
      responses:
        200:
          description: Nominator stake for the specified era
          # Define response schema

  /lastnomination:
    get:
      tags:
        - Nominator
      summary: The last Nomiantion
      responses:
        200:
          description: Successful response with the last nomination

  /proxytxs:
    get:
      tags:
        - Nominator
      summary: The pending proxy transactions
      responses:
        200:
          description: Successful response with the pending proxy transactions

  /location/validator/{address}:
    get:
      summary: "Validator Location Data"
      tags:
        - Location
      description: "Retrieve details of a specific validator location by address."
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."

  /score/{address}:
    get:
      summary: "Score Data"
      tags:
        - Score
      description: "Retrieve details of a specific validator's score'"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."
  /score/{address}/{session}:
    get:
      summary: "Score Data"
      tags:
        - Score
      description: "Retrieve details of a specific validator's score'"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
        - in: path
          name: session
          required: true
          schema:
            type: string
          description: "The session of a previous score"
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."

  /delegations/{address}:
    get:
      summary: "Delegation Data"
      tags:
        - Candidates
      description: "Retrieve details of a specific validator's delegations'"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."

  /opengov/votes/address/{address}:
    get:
      summary: "Open Gov Vote Data"
      tags:
        - Candidates
      description: "Retrieve details of a specific validator's votes"
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
          description: "The unique address of the validator."
      responses:
        '200':
          description: "Successful response."
        '404':
          description: "Data not found."


components:
  schemas:
    Reward:
      type: object
      properties:
        role:
          type: string
        exposurePercentage:
          type: integer
        totalStake:
          type: integer
        commission:
          type: integer
        era:
          type: integer
        validator:
          type: string
        nominator:
          type: string
        rewardAmount:
          type: string
        rewardDestination:
          type: string
        erasMinStake:
          type: number
          format: float
        validatorStakeEfficiency:
          type: number
          format: float
        blockHash:
          type: string
        blockNumber:
          type: integer
        timestamp:
          type: integer
        date:
          type: string
          format: date
        chf:
          type: number
          format: float
        usd:
          type: number
          format: float
        eur:
          type: number
          format: float
    RewardTotal:
      type: object
      properties:
        validator:
          type: string
          example: "ESNMjpEWcenAbCqGEsHVdbbRai79VQYMmV1fNW1kRZogmzx"
        total:
          type: number
          format: float
          example: 0.879469625343
        rewardCount:
          type: integer
          example: 1
    RewardStats:
      type: object
      properties:
        total:
          type: number
          format: float
          example: 0.235934990397
        rewardCount:
          type: integer
          example: 1
        avgEfficiency:
          type: number
          format: float
          example: 84.46114961271203
        avgStake:
          type: integer
          example: 7985