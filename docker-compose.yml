version: '3.8'
services:

    autoheal:
      restart: always
      image: willfarrell/autoheal
      environment:
        - AUTOHEAL_CONTAINER_LABEL=all
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock

    1kv-core:
      image: 1kv-core:latest
      build:
        context: .
        args:
          PACKAGE: core
        dockerfile: ./Dockerfile-dev
      restart: on-failure
      depends_on:
        - redis
        - mongo
      volumes:
        - .:/code
      ports:
        - "127.0.0.1:3300:3300"
      healthcheck:
        test: [ "CMD-SHELL", "curl -f http://localhost:3300/healthcheck" ]
        interval: 60s
        timeout: 60s
        retries: 3
        start_period: 180s
      deploy:
        restart_policy:
          condition: on-failure
          delay: 300s
          max_attempts: 3
          window: 120s
      networks:
        testing_net:
          ipv4_address: 172.28.1.7
      logging:
        driver: "json-file"
        options:
          max-size: "50m"

    1kv-gateway:
      image: 1kv-gateway:latest
      build:
        context: .
        args:
          PACKAGE: gateway
        dockerfile: ./Dockerfile-dev
      restart: on-failure
      depends_on:
        - redis
        - mongo
      volumes:
        - .:/code
      ports:
        - "127.0.0.1:3301:3301"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3301/healthcheck"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 60s
      deploy:
        restart_policy:
          condition: on-failure
          delay: 300s
          max_attempts: 3
          window: 120s
      networks:
        testing_net:
          ipv4_address: 172.28.1.8
      logging:
        driver: "json-file"
        options:
          max-size: "50m"

    1kv-telemetry:
      image: 1kv-telemetry:latest
      build:
        context: .
        args:
          PACKAGE: telemetry
        dockerfile: ./Dockerfile-dev
      restart: on-failure
      depends_on:
        - redis
        - mongo
      volumes:
        - .:/code
      ports:
        - "127.0.0.1:3302:3302"
      healthcheck:
        test: [ "CMD-SHELL", "curl -f http://localhost:3302/healthcheck" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 30s
      deploy:
        restart_policy:
          condition: on-failure
          delay: 300s
          max_attempts: 3
          window: 120s
      networks:
        testing_net:
          ipv4_address: 172.28.1.9
      logging:
        driver: "json-file"
        options:
          max-size: "50m"

    1kv-worker:
      image: 1kv-worker:latest
      build:
        context: .
        args:
          PACKAGE: worker
        dockerfile: ./Dockerfile-dev
      volumes:
        - .:/code
      deploy:
#        mode: replicated
#        replicas: 8
        restart_policy:
          condition: on-failure
          delay: 30s
          max_attempts: 3
          window: 120s
      depends_on:
        - redis
        - mongo
      ports:
        - "127.0.0.1:3303:3303"
      restart: on-failure
      healthcheck:
        test: [ "CMD-SHELL", "curl -f http://localhost:3303/healthcheck" ]
        interval: 30s
        timeout: 60s
        retries: 3
        start_period: 180s
      networks:
        testing_net:
#          ipv4_address: 172.28.1.16
      logging:
        driver: "json-file"
        options:
          max-size: "50m"

    mongo:
        image: mongo
        restart: always
        ports:
            - "127.0.0.1:27017:27017"
        networks:
            testing_net:
                ipv4_address: 172.28.1.12
        logging:
          driver: "json-file"
          options:
            max-size: "50m"

    mongo-express:
      image: mongo-express
      environment:
        - ME_CONFIG_MONGODB_SERVER=mongo
        - ME_CONFIG_MONGODB_PORT=27017
        - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
        - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      depends_on:
        - mongo
      ports:
        - "127.0.0.1:8888:8081"
      networks:
        testing_net:
          ipv4_address: 172.28.1.14
      logging:
        driver: "json-file"
        options:
          max-size: "50m"

    redis:
      image: redis:latest
      ports:
        - "127.0.0.1:6379:6379"
      expose:
        - "6379"
      volumes:
        - ./redis:/data
      restart: always
#      command: ["redis-server", "--bind", "172.28.1.13", "--port", "6379"]
      command: ["redis-server", "--port", "6379"]
      logging:
        driver: "json-file"
        options:
          max-size: "50m"
      networks:
        testing_net:
          ipv4_address: 172.28.1.13

networks:
    testing_net:
        ipam:
            driver: default
            config:
                - subnet: 172.28.0.0/16
