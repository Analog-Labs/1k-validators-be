version: '3.8'
services:

  1kv-core:
    build:
      context: .
      args:
        PACKAGE: core
      dockerfile: ./Dockerfile
    depends_on:
      - redis
    ports:
      - "127.0.0.1:3300:3300"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3300/healthcheck" ]
      interval: 60s
      timeout: 60s
      retries: 3
      start_period: 180s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 300s
        max_attempts: 3
        window: 120s
    networks:
      testing_net:
        ipv4_address: 172.28.1.1

  1kv-gateway:
    build:
      context: .
      args:
        PACKAGE: gateway
      dockerfile: ./Dockerfile
    depends_on:
      - redis
    ports:
      - "127.0.0.1:3301:3301"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3301/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 300s
        max_attempts: 3
        window: 120s
    networks:
      testing_net:
        ipv4_address: 172.28.1.2


  1kv-telemetry:
    build:
      context: .
      args:
        PACKAGE: telemetry
      dockerfile: ./Dockerfile
    depends_on:
      - redis
    ports:
      - "127.0.0.1:3302:3302"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3302/healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 300s
        max_attempts: 3
        window: 120s
    networks:
      testing_net:
        ipv4_address: 172.28.1.3

  1kv-worker:
    build:
      context: .
      args:
        PACKAGE: worker
      dockerfile: ./Dockerfile
    deploy:
      #        mode: replicated
      #        replicas: 8
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
        window: 120s
    depends_on:
      - redis
      - mongo
    ports:
      - "127.0.0.1:3303:3303"
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3303/healthcheck" ]
      interval: 30s
      timeout: 60s
      retries: 3
      start_period: 180s
    networks:
      testing_net:
#        ipv4_address: 172.28.1.3


  mongo:
    image: mongo
    restart: always
    ports:
      - "127.0.0.1:27017:27017"
    networks:
      testing_net:
        ipv4_address: 172.28.1.4
    logging:
      driver: "json-file"
      options:
        max-size: "50m"

  mongo-express:
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
    depends_on:
      - mongo
    ports:
      - "127.0.0.1:8888:8081"
    networks:
      testing_net:
        ipv4_address: 172.28.1.5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"

  redis:
    image: redis:alpine
    expose:
      - "6379"
    volumes:
      - ./redis:/data
    restart: always
    command: ["redis-server", "--bind", "172.28.1.6", "--port", "6379"]
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
    networks:
      testing_net:
        ipv4_address: 172.28.1.6


networks:
  testing_net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
